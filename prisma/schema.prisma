generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                   @id @default(cuid())
  clerkId              String                   @unique
  email                String                   @unique
  firstName            String?
  lastName             String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  systemRole           SystemRole?
  sentInvitations      OrganizationInvitation[] @relation("InvitedBy")
  memberships          OrganizationMembership[]
  organizationProfiles OrganizationProfile[]
  profile              Profile?
  organizations        Organization[]           @relation("OrganizationToUser")

  @@map("User")
}

model OrganizationMembership {
  id             String           @id @default(cuid())
  clerkId        String
  organizationId String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           OrganizationRole
  user           User             @relation(fields: [clerkId], references: [clerkId])
  organization   Organization     @relation(fields: [organizationId], references: [id])

  @@unique([clerkId, organizationId])
}

model Organization {
  id          String                   @id @default(cuid())
  name        String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  address     String?
  managerName String?
  invitations OrganizationInvitation[]
  memberships OrganizationMembership[]
  profiles    OrganizationProfile[]
  qrScanners  QrScanner[]
  users       User[]                   @relation("OrganizationToUser")
}

model OrganizationProfile {
  id             String       @id @default(cuid())
  clerkId        String
  organizationId String
  displayName    String?
  department     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  introduction   String?
  profileImage   String?
  user           User         @relation(fields: [clerkId], references: [clerkId])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([clerkId, organizationId])
}

model QrScanner {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  location       String
  scannerId      String       @unique
  password       String
  lastActive     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  description    String?
  status         String       @default("active")
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model OrganizationInvitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  role           OrganizationRole @default(member)
  expiresAt      DateTime
  invitedBy      String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  inviter        User             @relation("InvitedBy", fields: [invitedBy], references: [id])
  organization   Organization     @relation(fields: [organizationId], references: [id])

  @@unique([email, organizationId])
}

model Profile {
  id        String    @id @default(cuid())
  clerkId   String    @unique
  birthday  DateTime?
  gender    String?
  snsLinks  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [clerkId], references: [clerkId])

  @@map("Profile")
}

enum SystemRole {
  system_team
}

enum OrganizationRole {
  admin
  member
}
